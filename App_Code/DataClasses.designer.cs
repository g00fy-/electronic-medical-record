#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WarehouseManagement")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertWarehouse(Warehouse instance);
  partial void UpdateWarehouse(Warehouse instance);
  partial void DeleteWarehouse(Warehouse instance);
  partial void InsertProduct(Product instance);
  partial void UpdateProduct(Product instance);
  partial void DeleteProduct(Product instance);
  partial void InsertWES(WES instance);
  partial void UpdateWES(WES instance);
  partial void DeleteWES(WES instance);
  partial void InsertWESDetail(WESDetail instance);
  partial void UpdateWESDetail(WESDetail instance);
  partial void DeleteWESDetail(WESDetail instance);
  partial void InsertDOS(DOS instance);
  partial void UpdateDOS(DOS instance);
  partial void DeleteDOS(DOS instance);
  partial void InsertProvider(Provider instance);
  partial void UpdateProvider(Provider instance);
  partial void DeleteProvider(Provider instance);
  partial void Insertaspnet_User(aspnet_User instance);
  partial void Updateaspnet_User(aspnet_User instance);
  partial void Deleteaspnet_User(aspnet_User instance);
  partial void InsertDOSDetail(DOSDetail instance);
  partial void UpdateDOSDetail(DOSDetail instance);
  partial void DeleteDOSDetail(DOSDetail instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WarehouseManagementConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Warehouse> Warehouses
	{
		get
		{
			return this.GetTable<Warehouse>();
		}
	}
	
	public System.Data.Linq.Table<Product> Products
	{
		get
		{
			return this.GetTable<Product>();
		}
	}
	
	public System.Data.Linq.Table<WES> WES
	{
		get
		{
			return this.GetTable<WES>();
		}
	}
	
	public System.Data.Linq.Table<WESDetail> WESDetails
	{
		get
		{
			return this.GetTable<WESDetail>();
		}
	}
	
	public System.Data.Linq.Table<DOS> DOS
	{
		get
		{
			return this.GetTable<DOS>();
		}
	}
	
	public System.Data.Linq.Table<Provider> Providers
	{
		get
		{
			return this.GetTable<Provider>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_User> aspnet_Users
	{
		get
		{
			return this.GetTable<aspnet_User>();
		}
	}
	
	public System.Data.Linq.Table<DOSDetail> DOSDetails
	{
		get
		{
			return this.GetTable<DOSDetail>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
public partial class Warehouse : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ID;
	
	private string _Name;
	
	private string _Address;
	
	private EntitySet<WES> _WES;
	
	private EntitySet<DOS> _DOS;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
	
	public Warehouse()
	{
		this._WES = new EntitySet<WES>(new Action<WES>(this.attach_WES), new Action<WES>(this.detach_WES));
		this._DOS = new EntitySet<DOS>(new Action<DOS>(this.attach_DOS), new Action<DOS>(this.detach_DOS));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true)]
	public string ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_WES", Storage="_WES", ThisKey="ID", OtherKey="WarehouseID")]
	public EntitySet<WES> WES
	{
		get
		{
			return this._WES;
		}
		set
		{
			this._WES.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_DOS", Storage="_DOS", ThisKey="ID", OtherKey="WarehouseID")]
	public EntitySet<DOS> DOS
	{
		get
		{
			return this._DOS;
		}
		set
		{
			this._DOS.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_WES(WES entity)
	{
		this.SendPropertyChanging();
		entity.Warehouse = this;
	}
	
	private void detach_WES(WES entity)
	{
		this.SendPropertyChanging();
		entity.Warehouse = null;
	}
	
	private void attach_DOS(DOS entity)
	{
		this.SendPropertyChanging();
		entity.Warehouse = this;
	}
	
	private void detach_DOS(DOS entity)
	{
		this.SendPropertyChanging();
		entity.Warehouse = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ID;
	
	private string _Name;
	
	private string _Description;
	
	private string _Unit;
	
	private float _Price;
	
	private int _CurrentBalance;
	
	private EntitySet<WESDetail> _WESDetails;
	
	private EntitySet<DOSDetail> _DOSDetails;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnPriceChanging(float value);
    partial void OnPriceChanged();
    partial void OnCurrentBalanceChanging(int value);
    partial void OnCurrentBalanceChanged();
    #endregion
	
	public Product()
	{
		this._WESDetails = new EntitySet<WESDetail>(new Action<WESDetail>(this.attach_WESDetails), new Action<WESDetail>(this.detach_WESDetails));
		this._DOSDetails = new EntitySet<DOSDetail>(new Action<DOSDetail>(this.attach_DOSDetails), new Action<DOSDetail>(this.detach_DOSDetails));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true)]
	public string ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", CanBeNull=false)]
	public string Unit
	{
		get
		{
			return this._Unit;
		}
		set
		{
			if ((this._Unit != value))
			{
				this.OnUnitChanging(value);
				this.SendPropertyChanging();
				this._Unit = value;
				this.SendPropertyChanged("Unit");
				this.OnUnitChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price")]
	public float Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentBalance")]
	public int CurrentBalance
	{
		get
		{
			return this._CurrentBalance;
		}
		set
		{
			if ((this._CurrentBalance != value))
			{
				this.OnCurrentBalanceChanging(value);
				this.SendPropertyChanging();
				this._CurrentBalance = value;
				this.SendPropertyChanged("CurrentBalance");
				this.OnCurrentBalanceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_WESDetail", Storage="_WESDetails", ThisKey="ID", OtherKey="ProductID")]
	public EntitySet<WESDetail> WESDetails
	{
		get
		{
			return this._WESDetails;
		}
		set
		{
			this._WESDetails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_DOSDetail", Storage="_DOSDetails", ThisKey="ID", OtherKey="ProductID")]
	public EntitySet<DOSDetail> DOSDetails
	{
		get
		{
			return this._DOSDetails;
		}
		set
		{
			this._DOSDetails.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_WESDetails(WESDetail entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_WESDetails(WESDetail entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
	
	private void attach_DOSDetails(DOSDetail entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_DOSDetails(DOSDetail entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
public partial class WES : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ID;
	
	private System.DateTime _Date;
	
	private string _WarehouseID;
	
	private string _ProviderID;
	
	private string _Username;
	
	private EntitySet<WESDetail> _WESDetails;
	
	private EntityRef<Warehouse> _Warehouse;
	
	private EntityRef<Provider> _Provider;
	
	private EntityRef<aspnet_User> _aspnet_User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnWarehouseIDChanging(string value);
    partial void OnWarehouseIDChanged();
    partial void OnProviderIDChanging(string value);
    partial void OnProviderIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
	
	public WES()
	{
		this._WESDetails = new EntitySet<WESDetail>(new Action<WESDetail>(this.attach_WESDetails), new Action<WESDetail>(this.detach_WESDetails));
		this._Warehouse = default(EntityRef<Warehouse>);
		this._Provider = default(EntityRef<Provider>);
		this._aspnet_User = default(EntityRef<aspnet_User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true)]
	public string ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", CanBeNull=false)]
	public string WarehouseID
	{
		get
		{
			return this._WarehouseID;
		}
		set
		{
			if ((this._WarehouseID != value))
			{
				if (this._Warehouse.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWarehouseIDChanging(value);
				this.SendPropertyChanging();
				this._WarehouseID = value;
				this.SendPropertyChanged("WarehouseID");
				this.OnWarehouseIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderID", CanBeNull=false)]
	public string ProviderID
	{
		get
		{
			return this._ProviderID;
		}
		set
		{
			if ((this._ProviderID != value))
			{
				if (this._Provider.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProviderIDChanging(value);
				this.SendPropertyChanging();
				this._ProviderID = value;
				this.SendPropertyChanged("ProviderID");
				this.OnProviderIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				if (this._aspnet_User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WES_WESDetail", Storage="_WESDetails", ThisKey="ID", OtherKey="WESID")]
	public EntitySet<WESDetail> WESDetails
	{
		get
		{
			return this._WESDetails;
		}
		set
		{
			this._WESDetails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_WES", Storage="_Warehouse", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
	public Warehouse Warehouse
	{
		get
		{
			return this._Warehouse.Entity;
		}
		set
		{
			Warehouse previousValue = this._Warehouse.Entity;
			if (((previousValue != value) 
						|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Warehouse.Entity = null;
					previousValue.WES.Remove(this);
				}
				this._Warehouse.Entity = value;
				if ((value != null))
				{
					value.WES.Add(this);
					this._WarehouseID = value.ID;
				}
				else
				{
					this._WarehouseID = default(string);
				}
				this.SendPropertyChanged("Warehouse");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Provider_WES", Storage="_Provider", ThisKey="ProviderID", OtherKey="ID", IsForeignKey=true)]
	public Provider Provider
	{
		get
		{
			return this._Provider.Entity;
		}
		set
		{
			Provider previousValue = this._Provider.Entity;
			if (((previousValue != value) 
						|| (this._Provider.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Provider.Entity = null;
					previousValue.WES.Remove(this);
				}
				this._Provider.Entity = value;
				if ((value != null))
				{
					value.WES.Add(this);
					this._ProviderID = value.ID;
				}
				else
				{
					this._ProviderID = default(string);
				}
				this.SendPropertyChanged("Provider");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_WES", Storage="_aspnet_User", ThisKey="Username", OtherKey="UserName", IsForeignKey=true)]
	public aspnet_User aspnet_User
	{
		get
		{
			return this._aspnet_User.Entity;
		}
		set
		{
			aspnet_User previousValue = this._aspnet_User.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_User.Entity = null;
					previousValue.WES.Remove(this);
				}
				this._aspnet_User.Entity = value;
				if ((value != null))
				{
					value.WES.Add(this);
					this._Username = value.UserName;
				}
				else
				{
					this._Username = default(string);
				}
				this.SendPropertyChanged("aspnet_User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_WESDetails(WESDetail entity)
	{
		this.SendPropertyChanging();
		entity.WES = this;
	}
	
	private void detach_WESDetails(WESDetail entity)
	{
		this.SendPropertyChanging();
		entity.WES = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
public partial class WESDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ID;
	
	private string _ProductID;
	
	private int _Quantity;
	
	private string _Unit;
	
	private float _Price;
	
	private string _WESID;
	
	private EntityRef<WES> _WES;
	
	private EntityRef<Product> _Product;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnPriceChanging(float value);
    partial void OnPriceChanged();
    partial void OnWESIDChanging(string value);
    partial void OnWESIDChanged();
    #endregion
	
	public WESDetail()
	{
		this._WES = default(EntityRef<WES>);
		this._Product = default(EntityRef<Product>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true)]
	public string ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", CanBeNull=false)]
	public string ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity")]
	public int Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", CanBeNull=false)]
	public string Unit
	{
		get
		{
			return this._Unit;
		}
		set
		{
			if ((this._Unit != value))
			{
				this.OnUnitChanging(value);
				this.SendPropertyChanging();
				this._Unit = value;
				this.SendPropertyChanged("Unit");
				this.OnUnitChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price")]
	public float Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WESID", CanBeNull=false)]
	public string WESID
	{
		get
		{
			return this._WESID;
		}
		set
		{
			if ((this._WESID != value))
			{
				if (this._WES.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWESIDChanging(value);
				this.SendPropertyChanging();
				this._WESID = value;
				this.SendPropertyChanged("WESID");
				this.OnWESIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WES_WESDetail", Storage="_WES", ThisKey="WESID", OtherKey="ID", IsForeignKey=true)]
	public WES WES
	{
		get
		{
			return this._WES.Entity;
		}
		set
		{
			WES previousValue = this._WES.Entity;
			if (((previousValue != value) 
						|| (this._WES.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WES.Entity = null;
					previousValue.WESDetails.Remove(this);
				}
				this._WES.Entity = value;
				if ((value != null))
				{
					value.WESDetails.Add(this);
					this._WESID = value.ID;
				}
				else
				{
					this._WESID = default(string);
				}
				this.SendPropertyChanged("WES");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_WESDetail", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.WESDetails.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.WESDetails.Add(this);
					this._ProductID = value.ID;
				}
				else
				{
					this._ProductID = default(string);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
public partial class DOS : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ID;
	
	private System.DateTime _Date;
	
	private string _WarehouseID;
	
	private string _ProviderID;
	
	private string _Username;
	
	private EntitySet<DOSDetail> _DOSDetails;
	
	private EntityRef<Warehouse> _Warehouse;
	
	private EntityRef<Provider> _Provider;
	
	private EntityRef<aspnet_User> _aspnet_User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnWarehouseIDChanging(string value);
    partial void OnWarehouseIDChanged();
    partial void OnProviderIDChanging(string value);
    partial void OnProviderIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
	
	public DOS()
	{
		this._DOSDetails = new EntitySet<DOSDetail>(new Action<DOSDetail>(this.attach_DOSDetails), new Action<DOSDetail>(this.detach_DOSDetails));
		this._Warehouse = default(EntityRef<Warehouse>);
		this._Provider = default(EntityRef<Provider>);
		this._aspnet_User = default(EntityRef<aspnet_User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true)]
	public string ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", CanBeNull=false)]
	public string WarehouseID
	{
		get
		{
			return this._WarehouseID;
		}
		set
		{
			if ((this._WarehouseID != value))
			{
				if (this._Warehouse.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWarehouseIDChanging(value);
				this.SendPropertyChanging();
				this._WarehouseID = value;
				this.SendPropertyChanged("WarehouseID");
				this.OnWarehouseIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderID", CanBeNull=false)]
	public string ProviderID
	{
		get
		{
			return this._ProviderID;
		}
		set
		{
			if ((this._ProviderID != value))
			{
				if (this._Provider.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProviderIDChanging(value);
				this.SendPropertyChanging();
				this._ProviderID = value;
				this.SendPropertyChanged("ProviderID");
				this.OnProviderIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				if (this._aspnet_User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DOS_DOSDetail", Storage="_DOSDetails", ThisKey="ID", OtherKey="DOSID")]
	public EntitySet<DOSDetail> DOSDetails
	{
		get
		{
			return this._DOSDetails;
		}
		set
		{
			this._DOSDetails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_DOS", Storage="_Warehouse", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
	public Warehouse Warehouse
	{
		get
		{
			return this._Warehouse.Entity;
		}
		set
		{
			Warehouse previousValue = this._Warehouse.Entity;
			if (((previousValue != value) 
						|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Warehouse.Entity = null;
					previousValue.DOS.Remove(this);
				}
				this._Warehouse.Entity = value;
				if ((value != null))
				{
					value.DOS.Add(this);
					this._WarehouseID = value.ID;
				}
				else
				{
					this._WarehouseID = default(string);
				}
				this.SendPropertyChanged("Warehouse");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Provider_DOS", Storage="_Provider", ThisKey="ProviderID", OtherKey="ID", IsForeignKey=true)]
	public Provider Provider
	{
		get
		{
			return this._Provider.Entity;
		}
		set
		{
			Provider previousValue = this._Provider.Entity;
			if (((previousValue != value) 
						|| (this._Provider.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Provider.Entity = null;
					previousValue.DOS.Remove(this);
				}
				this._Provider.Entity = value;
				if ((value != null))
				{
					value.DOS.Add(this);
					this._ProviderID = value.ID;
				}
				else
				{
					this._ProviderID = default(string);
				}
				this.SendPropertyChanged("Provider");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_DOS", Storage="_aspnet_User", ThisKey="Username", OtherKey="UserName", IsForeignKey=true)]
	public aspnet_User aspnet_User
	{
		get
		{
			return this._aspnet_User.Entity;
		}
		set
		{
			aspnet_User previousValue = this._aspnet_User.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_User.Entity = null;
					previousValue.DOS.Remove(this);
				}
				this._aspnet_User.Entity = value;
				if ((value != null))
				{
					value.DOS.Add(this);
					this._Username = value.UserName;
				}
				else
				{
					this._Username = default(string);
				}
				this.SendPropertyChanged("aspnet_User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DOSDetails(DOSDetail entity)
	{
		this.SendPropertyChanging();
		entity.DOS = this;
	}
	
	private void detach_DOSDetails(DOSDetail entity)
	{
		this.SendPropertyChanging();
		entity.DOS = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
public partial class Provider : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ID;
	
	private string _Name;
	
	private string _Address;
	
	private string _Phone;
	
	private string _Email;
	
	private string _ContactPerson;
	
	private string _ContactPersonPhone;
	
	private string _ContactPersonEmail;
	
	private EntitySet<WES> _WES;
	
	private EntitySet<DOS> _DOS;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnContactPersonChanging(string value);
    partial void OnContactPersonChanged();
    partial void OnContactPersonPhoneChanging(string value);
    partial void OnContactPersonPhoneChanged();
    partial void OnContactPersonEmailChanging(string value);
    partial void OnContactPersonEmailChanged();
    #endregion
	
	public Provider()
	{
		this._WES = new EntitySet<WES>(new Action<WES>(this.attach_WES), new Action<WES>(this.detach_WES));
		this._DOS = new EntitySet<DOS>(new Action<DOS>(this.attach_DOS), new Action<DOS>(this.detach_DOS));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true)]
	public string ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", CanBeNull=false)]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPerson", CanBeNull=false)]
	public string ContactPerson
	{
		get
		{
			return this._ContactPerson;
		}
		set
		{
			if ((this._ContactPerson != value))
			{
				this.OnContactPersonChanging(value);
				this.SendPropertyChanging();
				this._ContactPerson = value;
				this.SendPropertyChanged("ContactPerson");
				this.OnContactPersonChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPersonPhone", CanBeNull=false)]
	public string ContactPersonPhone
	{
		get
		{
			return this._ContactPersonPhone;
		}
		set
		{
			if ((this._ContactPersonPhone != value))
			{
				this.OnContactPersonPhoneChanging(value);
				this.SendPropertyChanging();
				this._ContactPersonPhone = value;
				this.SendPropertyChanged("ContactPersonPhone");
				this.OnContactPersonPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPersonEmail", CanBeNull=false)]
	public string ContactPersonEmail
	{
		get
		{
			return this._ContactPersonEmail;
		}
		set
		{
			if ((this._ContactPersonEmail != value))
			{
				this.OnContactPersonEmailChanging(value);
				this.SendPropertyChanging();
				this._ContactPersonEmail = value;
				this.SendPropertyChanged("ContactPersonEmail");
				this.OnContactPersonEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Provider_WES", Storage="_WES", ThisKey="ID", OtherKey="ProviderID")]
	public EntitySet<WES> WES
	{
		get
		{
			return this._WES;
		}
		set
		{
			this._WES.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Provider_DOS", Storage="_DOS", ThisKey="ID", OtherKey="ProviderID")]
	public EntitySet<DOS> DOS
	{
		get
		{
			return this._DOS;
		}
		set
		{
			this._DOS.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_WES(WES entity)
	{
		this.SendPropertyChanging();
		entity.Provider = this;
	}
	
	private void detach_WES(WES entity)
	{
		this.SendPropertyChanging();
		entity.Provider = null;
	}
	
	private void attach_DOS(DOS entity)
	{
		this.SendPropertyChanging();
		entity.Provider = this;
	}
	
	private void detach_DOS(DOS entity)
	{
		this.SendPropertyChanging();
		entity.Provider = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ApplicationId;
	
	private System.Guid _UserId;
	
	private string _UserName;
	
	private string _LoweredUserName;
	
	private string _MobileAlias;
	
	private bool _IsAnonymous;
	
	private System.DateTime _LastActivityDate;
	
	private EntitySet<WES> _WES;
	
	private EntitySet<DOS> _DOS;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
	
	public aspnet_User()
	{
		this._WES = new EntitySet<WES>(new Action<WES>(this.attach_WES), new Action<WES>(this.detach_WES));
		this._DOS = new EntitySet<DOS>(new Action<DOS>(this.attach_DOS), new Action<DOS>(this.detach_DOS));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ApplicationId
	{
		get
		{
			return this._ApplicationId;
		}
		set
		{
			if ((this._ApplicationId != value))
			{
				this.OnApplicationIdChanging(value);
				this.SendPropertyChanging();
				this._ApplicationId = value;
				this.SendPropertyChanged("ApplicationId");
				this.OnApplicationIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string LoweredUserName
	{
		get
		{
			return this._LoweredUserName;
		}
		set
		{
			if ((this._LoweredUserName != value))
			{
				this.OnLoweredUserNameChanging(value);
				this.SendPropertyChanging();
				this._LoweredUserName = value;
				this.SendPropertyChanged("LoweredUserName");
				this.OnLoweredUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
	public string MobileAlias
	{
		get
		{
			return this._MobileAlias;
		}
		set
		{
			if ((this._MobileAlias != value))
			{
				this.OnMobileAliasChanging(value);
				this.SendPropertyChanging();
				this._MobileAlias = value;
				this.SendPropertyChanged("MobileAlias");
				this.OnMobileAliasChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
	public bool IsAnonymous
	{
		get
		{
			return this._IsAnonymous;
		}
		set
		{
			if ((this._IsAnonymous != value))
			{
				this.OnIsAnonymousChanging(value);
				this.SendPropertyChanging();
				this._IsAnonymous = value;
				this.SendPropertyChanged("IsAnonymous");
				this.OnIsAnonymousChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastActivityDate
	{
		get
		{
			return this._LastActivityDate;
		}
		set
		{
			if ((this._LastActivityDate != value))
			{
				this.OnLastActivityDateChanging(value);
				this.SendPropertyChanging();
				this._LastActivityDate = value;
				this.SendPropertyChanged("LastActivityDate");
				this.OnLastActivityDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_WES", Storage="_WES", ThisKey="UserName", OtherKey="Username")]
	public EntitySet<WES> WES
	{
		get
		{
			return this._WES;
		}
		set
		{
			this._WES.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_DOS", Storage="_DOS", ThisKey="UserName", OtherKey="Username")]
	public EntitySet<DOS> DOS
	{
		get
		{
			return this._DOS;
		}
		set
		{
			this._DOS.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_WES(WES entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = this;
	}
	
	private void detach_WES(WES entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = null;
	}
	
	private void attach_DOS(DOS entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = this;
	}
	
	private void detach_DOS(DOS entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
public partial class DOSDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ID;
	
	private string _ProductID;
	
	private int _Quantity;
	
	private string _Unit;
	
	private float _Price;
	
	private string _DOSID;
	
	private EntityRef<Product> _Product;
	
	private EntityRef<DOS> _DOS;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnPriceChanging(float value);
    partial void OnPriceChanged();
    partial void OnDOSIDChanging(string value);
    partial void OnDOSIDChanged();
    #endregion
	
	public DOSDetail()
	{
		this._Product = default(EntityRef<Product>);
		this._DOS = default(EntityRef<DOS>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true)]
	public string ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", CanBeNull=false)]
	public string ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity")]
	public int Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", CanBeNull=false)]
	public string Unit
	{
		get
		{
			return this._Unit;
		}
		set
		{
			if ((this._Unit != value))
			{
				this.OnUnitChanging(value);
				this.SendPropertyChanging();
				this._Unit = value;
				this.SendPropertyChanged("Unit");
				this.OnUnitChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price")]
	public float Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOSID", CanBeNull=false)]
	public string DOSID
	{
		get
		{
			return this._DOSID;
		}
		set
		{
			if ((this._DOSID != value))
			{
				if (this._DOS.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDOSIDChanging(value);
				this.SendPropertyChanging();
				this._DOSID = value;
				this.SendPropertyChanged("DOSID");
				this.OnDOSIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_DOSDetail", Storage="_Product", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.DOSDetails.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.DOSDetails.Add(this);
					this._ProductID = value.ID;
				}
				else
				{
					this._ProductID = default(string);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DOS_DOSDetail", Storage="_DOS", ThisKey="DOSID", OtherKey="ID", IsForeignKey=true)]
	public DOS DOS
	{
		get
		{
			return this._DOS.Entity;
		}
		set
		{
			DOS previousValue = this._DOS.Entity;
			if (((previousValue != value) 
						|| (this._DOS.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DOS.Entity = null;
					previousValue.DOSDetails.Remove(this);
				}
				this._DOS.Entity = value;
				if ((value != null))
				{
					value.DOSDetails.Add(this);
					this._DOSID = value.ID;
				}
				else
				{
					this._DOSID = default(string);
				}
				this.SendPropertyChanged("DOS");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
