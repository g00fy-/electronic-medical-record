#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ElectronicMedicalRecord")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertVisit(Visit instance);
  partial void UpdateVisit(Visit instance);
  partial void DeleteVisit(Visit instance);
  partial void InsertDrug(Drug instance);
  partial void UpdateDrug(Drug instance);
  partial void DeleteDrug(Drug instance);
  partial void InsertDrugGroup(DrugGroup instance);
  partial void UpdateDrugGroup(DrugGroup instance);
  partial void DeleteDrugGroup(DrugGroup instance);
  partial void InsertICD(ICD instance);
  partial void UpdateICD(ICD instance);
  partial void DeleteICD(ICD instance);
  partial void InsertICDChapter(ICDChapter instance);
  partial void UpdateICDChapter(ICDChapter instance);
  partial void DeleteICDChapter(ICDChapter instance);
  partial void InsertLabOrder(LabOrder instance);
  partial void UpdateLabOrder(LabOrder instance);
  partial void DeleteLabOrder(LabOrder instance);
  partial void InsertLabOrderDetail(LabOrderDetail instance);
  partial void UpdateLabOrderDetail(LabOrderDetail instance);
  partial void DeleteLabOrderDetail(LabOrderDetail instance);
  partial void InsertMedicalService(MedicalService instance);
  partial void UpdateMedicalService(MedicalService instance);
  partial void DeleteMedicalService(MedicalService instance);
  partial void InsertMedicalServiceGroup(MedicalServiceGroup instance);
  partial void UpdateMedicalServiceGroup(MedicalServiceGroup instance);
  partial void DeleteMedicalServiceGroup(MedicalServiceGroup instance);
  partial void InsertPrescription(Prescription instance);
  partial void UpdatePrescription(Prescription instance);
  partial void DeletePrescription(Prescription instance);
  partial void InsertPrescriptionDetail(PrescriptionDetail instance);
  partial void UpdatePrescriptionDetail(PrescriptionDetail instance);
  partial void DeletePrescriptionDetail(PrescriptionDetail instance);
  partial void InsertDoctor(Doctor instance);
  partial void UpdateDoctor(Doctor instance);
  partial void DeleteDoctor(Doctor instance);
  partial void InsertPatient(Patient instance);
  partial void UpdatePatient(Patient instance);
  partial void DeletePatient(Patient instance);
  partial void InsertHospital(Hospital instance);
  partial void UpdateHospital(Hospital instance);
  partial void DeleteHospital(Hospital instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ElectronicMedicalRecordConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Visit> Visits
	{
		get
		{
			return this.GetTable<Visit>();
		}
	}
	
	public System.Data.Linq.Table<Drug> Drugs
	{
		get
		{
			return this.GetTable<Drug>();
		}
	}
	
	public System.Data.Linq.Table<DrugGroup> DrugGroups
	{
		get
		{
			return this.GetTable<DrugGroup>();
		}
	}
	
	public System.Data.Linq.Table<ICD> ICDs
	{
		get
		{
			return this.GetTable<ICD>();
		}
	}
	
	public System.Data.Linq.Table<ICDChapter> ICDChapters
	{
		get
		{
			return this.GetTable<ICDChapter>();
		}
	}
	
	public System.Data.Linq.Table<LabOrder> LabOrders
	{
		get
		{
			return this.GetTable<LabOrder>();
		}
	}
	
	public System.Data.Linq.Table<LabOrderDetail> LabOrderDetails
	{
		get
		{
			return this.GetTable<LabOrderDetail>();
		}
	}
	
	public System.Data.Linq.Table<MedicalService> MedicalServices
	{
		get
		{
			return this.GetTable<MedicalService>();
		}
	}
	
	public System.Data.Linq.Table<MedicalServiceGroup> MedicalServiceGroups
	{
		get
		{
			return this.GetTable<MedicalServiceGroup>();
		}
	}
	
	public System.Data.Linq.Table<Prescription> Prescriptions
	{
		get
		{
			return this.GetTable<Prescription>();
		}
	}
	
	public System.Data.Linq.Table<PrescriptionDetail> PrescriptionDetails
	{
		get
		{
			return this.GetTable<PrescriptionDetail>();
		}
	}
	
	public System.Data.Linq.Table<Doctor> Doctors
	{
		get
		{
			return this.GetTable<Doctor>();
		}
	}
	
	public System.Data.Linq.Table<Patient> Patients
	{
		get
		{
			return this.GetTable<Patient>();
		}
	}
	
	public System.Data.Linq.Table<Hospital> Hospitals
	{
		get
		{
			return this.GetTable<Hospital>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visit")]
public partial class Visit : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private long _Date;
	
	private long _HospitalID;
	
	private long _PatientID;
	
	private long _DoctorID;
	
	private long _ICDID;
	
	private string _Outcome;
	
	private EntitySet<LabOrder> _LabOrders;
	
	private EntitySet<Prescription> _Prescriptions;
	
	private EntityRef<ICD> _ICD;
	
	private EntityRef<Doctor> _Doctor;
	
	private EntityRef<Patient> _Patient;
	
	private EntityRef<Hospital> _Hospital;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnDateChanging(long value);
    partial void OnDateChanged();
    partial void OnHospitalIDChanging(long value);
    partial void OnHospitalIDChanged();
    partial void OnPatientIDChanging(long value);
    partial void OnPatientIDChanged();
    partial void OnDoctorIDChanging(long value);
    partial void OnDoctorIDChanged();
    partial void OnICDIDChanging(long value);
    partial void OnICDIDChanged();
    partial void OnOutcomeChanging(string value);
    partial void OnOutcomeChanged();
    #endregion
	
	public Visit()
	{
		this._LabOrders = new EntitySet<LabOrder>(new Action<LabOrder>(this.attach_LabOrders), new Action<LabOrder>(this.detach_LabOrders));
		this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
		this._ICD = default(EntityRef<ICD>);
		this._Doctor = default(EntityRef<Doctor>);
		this._Patient = default(EntityRef<Patient>);
		this._Hospital = default(EntityRef<Hospital>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="BigInt NOT NULL")]
	public long Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HospitalID", DbType="BigInt NOT NULL")]
	public long HospitalID
	{
		get
		{
			return this._HospitalID;
		}
		set
		{
			if ((this._HospitalID != value))
			{
				if (this._Hospital.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnHospitalIDChanging(value);
				this.SendPropertyChanging();
				this._HospitalID = value;
				this.SendPropertyChanged("HospitalID");
				this.OnHospitalIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="BigInt NOT NULL")]
	public long PatientID
	{
		get
		{
			return this._PatientID;
		}
		set
		{
			if ((this._PatientID != value))
			{
				if (this._Patient.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPatientIDChanging(value);
				this.SendPropertyChanging();
				this._PatientID = value;
				this.SendPropertyChanged("PatientID");
				this.OnPatientIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="BigInt NOT NULL")]
	public long DoctorID
	{
		get
		{
			return this._DoctorID;
		}
		set
		{
			if ((this._DoctorID != value))
			{
				if (this._Doctor.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDoctorIDChanging(value);
				this.SendPropertyChanging();
				this._DoctorID = value;
				this.SendPropertyChanged("DoctorID");
				this.OnDoctorIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICDID", DbType="BigInt NOT NULL")]
	public long ICDID
	{
		get
		{
			return this._ICDID;
		}
		set
		{
			if ((this._ICDID != value))
			{
				if (this._ICD.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnICDIDChanging(value);
				this.SendPropertyChanging();
				this._ICDID = value;
				this.SendPropertyChanged("ICDID");
				this.OnICDIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Outcome", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Outcome
	{
		get
		{
			return this._Outcome;
		}
		set
		{
			if ((this._Outcome != value))
			{
				this.OnOutcomeChanging(value);
				this.SendPropertyChanging();
				this._Outcome = value;
				this.SendPropertyChanged("Outcome");
				this.OnOutcomeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_LabOrder", Storage="_LabOrders", ThisKey="ID", OtherKey="VisitID")]
	public EntitySet<LabOrder> LabOrders
	{
		get
		{
			return this._LabOrders;
		}
		set
		{
			this._LabOrders.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_Prescription", Storage="_Prescriptions", ThisKey="ID", OtherKey="VisitID")]
	public EntitySet<Prescription> Prescriptions
	{
		get
		{
			return this._Prescriptions;
		}
		set
		{
			this._Prescriptions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICD_Visit", Storage="_ICD", ThisKey="ICDID", OtherKey="ID", IsForeignKey=true)]
	public ICD ICD
	{
		get
		{
			return this._ICD.Entity;
		}
		set
		{
			ICD previousValue = this._ICD.Entity;
			if (((previousValue != value) 
						|| (this._ICD.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ICD.Entity = null;
					previousValue.Visits.Remove(this);
				}
				this._ICD.Entity = value;
				if ((value != null))
				{
					value.Visits.Add(this);
					this._ICDID = value.ID;
				}
				else
				{
					this._ICDID = default(long);
				}
				this.SendPropertyChanged("ICD");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Visit", Storage="_Doctor", ThisKey="DoctorID", OtherKey="ID", IsForeignKey=true)]
	public Doctor Doctor
	{
		get
		{
			return this._Doctor.Entity;
		}
		set
		{
			Doctor previousValue = this._Doctor.Entity;
			if (((previousValue != value) 
						|| (this._Doctor.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Doctor.Entity = null;
					previousValue.Visits.Remove(this);
				}
				this._Doctor.Entity = value;
				if ((value != null))
				{
					value.Visits.Add(this);
					this._DoctorID = value.ID;
				}
				else
				{
					this._DoctorID = default(long);
				}
				this.SendPropertyChanged("Doctor");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Visit", Storage="_Patient", ThisKey="PatientID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Patient Patient
	{
		get
		{
			return this._Patient.Entity;
		}
		set
		{
			Patient previousValue = this._Patient.Entity;
			if (((previousValue != value) 
						|| (this._Patient.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Patient.Entity = null;
					previousValue.Visits.Remove(this);
				}
				this._Patient.Entity = value;
				if ((value != null))
				{
					value.Visits.Add(this);
					this._PatientID = value.ID;
				}
				else
				{
					this._PatientID = default(long);
				}
				this.SendPropertyChanged("Patient");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Visit", Storage="_Hospital", ThisKey="HospitalID", OtherKey="ID", IsForeignKey=true)]
	public Hospital Hospital
	{
		get
		{
			return this._Hospital.Entity;
		}
		set
		{
			Hospital previousValue = this._Hospital.Entity;
			if (((previousValue != value) 
						|| (this._Hospital.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Hospital.Entity = null;
					previousValue.Visits.Remove(this);
				}
				this._Hospital.Entity = value;
				if ((value != null))
				{
					value.Visits.Add(this);
					this._HospitalID = value.ID;
				}
				else
				{
					this._HospitalID = default(long);
				}
				this.SendPropertyChanged("Hospital");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_LabOrders(LabOrder entity)
	{
		this.SendPropertyChanging();
		entity.Visit = this;
	}
	
	private void detach_LabOrders(LabOrder entity)
	{
		this.SendPropertyChanging();
		entity.Visit = null;
	}
	
	private void attach_Prescriptions(Prescription entity)
	{
		this.SendPropertyChanging();
		entity.Visit = this;
	}
	
	private void detach_Prescriptions(Prescription entity)
	{
		this.SendPropertyChanging();
		entity.Visit = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drug")]
public partial class Drug : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Name;
	
	private string _GenericName;
	
	private string _Unit;
	
	private double _Price;
	
	private long _DrugGroupID;
	
	private EntitySet<PrescriptionDetail> _PrescriptionDetails;
	
	private EntityRef<DrugGroup> _DrugGroup;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGenericNameChanging(string value);
    partial void OnGenericNameChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnDrugGroupIDChanging(long value);
    partial void OnDrugGroupIDChanged();
    #endregion
	
	public Drug()
	{
		this._PrescriptionDetails = new EntitySet<PrescriptionDetail>(new Action<PrescriptionDetail>(this.attach_PrescriptionDetails), new Action<PrescriptionDetail>(this.detach_PrescriptionDetails));
		this._DrugGroup = default(EntityRef<DrugGroup>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenericName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string GenericName
	{
		get
		{
			return this._GenericName;
		}
		set
		{
			if ((this._GenericName != value))
			{
				this.OnGenericNameChanging(value);
				this.SendPropertyChanging();
				this._GenericName = value;
				this.SendPropertyChanged("GenericName");
				this.OnGenericNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Unit
	{
		get
		{
			return this._Unit;
		}
		set
		{
			if ((this._Unit != value))
			{
				this.OnUnitChanging(value);
				this.SendPropertyChanging();
				this._Unit = value;
				this.SendPropertyChanged("Unit");
				this.OnUnitChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
	public double Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugGroupID", DbType="BigInt NOT NULL")]
	public long DrugGroupID
	{
		get
		{
			return this._DrugGroupID;
		}
		set
		{
			if ((this._DrugGroupID != value))
			{
				if (this._DrugGroup.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDrugGroupIDChanging(value);
				this.SendPropertyChanging();
				this._DrugGroupID = value;
				this.SendPropertyChanged("DrugGroupID");
				this.OnDrugGroupIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drug_PrescriptionDetail", Storage="_PrescriptionDetails", ThisKey="ID", OtherKey="DrugID")]
	public EntitySet<PrescriptionDetail> PrescriptionDetails
	{
		get
		{
			return this._PrescriptionDetails;
		}
		set
		{
			this._PrescriptionDetails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugGroup_Drug", Storage="_DrugGroup", ThisKey="DrugGroupID", OtherKey="ID", IsForeignKey=true)]
	public DrugGroup DrugGroup
	{
		get
		{
			return this._DrugGroup.Entity;
		}
		set
		{
			DrugGroup previousValue = this._DrugGroup.Entity;
			if (((previousValue != value) 
						|| (this._DrugGroup.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DrugGroup.Entity = null;
					previousValue.Drugs.Remove(this);
				}
				this._DrugGroup.Entity = value;
				if ((value != null))
				{
					value.Drugs.Add(this);
					this._DrugGroupID = value.ID;
				}
				else
				{
					this._DrugGroupID = default(long);
				}
				this.SendPropertyChanged("DrugGroup");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PrescriptionDetails(PrescriptionDetail entity)
	{
		this.SendPropertyChanging();
		entity.Drug = this;
	}
	
	private void detach_PrescriptionDetails(PrescriptionDetail entity)
	{
		this.SendPropertyChanging();
		entity.Drug = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugGroup")]
public partial class DrugGroup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Name;
	
	private string _Description;
	
	private EntitySet<Drug> _Drugs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public DrugGroup()
	{
		this._Drugs = new EntitySet<Drug>(new Action<Drug>(this.attach_Drugs), new Action<Drug>(this.detach_Drugs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugGroup_Drug", Storage="_Drugs", ThisKey="ID", OtherKey="DrugGroupID")]
	public EntitySet<Drug> Drugs
	{
		get
		{
			return this._Drugs;
		}
		set
		{
			this._Drugs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Drugs(Drug entity)
	{
		this.SendPropertyChanging();
		entity.DrugGroup = this;
	}
	
	private void detach_Drugs(Drug entity)
	{
		this.SendPropertyChanging();
		entity.DrugGroup = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ICD")]
public partial class ICD : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Code;
	
	private string _Name;
	
	private string _Description;
	
	private long _ICDChapterID;
	
	private EntitySet<Visit> _Visits;
	
	private EntityRef<ICDChapter> _ICDChapter;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnICDChapterIDChanging(long value);
    partial void OnICDChapterIDChanged();
    #endregion
	
	public ICD()
	{
		this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
		this._ICDChapter = default(EntityRef<ICDChapter>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICDChapterID", DbType="BigInt NOT NULL")]
	public long ICDChapterID
	{
		get
		{
			return this._ICDChapterID;
		}
		set
		{
			if ((this._ICDChapterID != value))
			{
				if (this._ICDChapter.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnICDChapterIDChanging(value);
				this.SendPropertyChanging();
				this._ICDChapterID = value;
				this.SendPropertyChanged("ICDChapterID");
				this.OnICDChapterIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICD_Visit", Storage="_Visits", ThisKey="ID", OtherKey="ICDID")]
	public EntitySet<Visit> Visits
	{
		get
		{
			return this._Visits;
		}
		set
		{
			this._Visits.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICDChapter_ICD", Storage="_ICDChapter", ThisKey="ICDChapterID", OtherKey="ID", IsForeignKey=true)]
	public ICDChapter ICDChapter
	{
		get
		{
			return this._ICDChapter.Entity;
		}
		set
		{
			ICDChapter previousValue = this._ICDChapter.Entity;
			if (((previousValue != value) 
						|| (this._ICDChapter.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ICDChapter.Entity = null;
					previousValue.ICDs.Remove(this);
				}
				this._ICDChapter.Entity = value;
				if ((value != null))
				{
					value.ICDs.Add(this);
					this._ICDChapterID = value.ID;
				}
				else
				{
					this._ICDChapterID = default(long);
				}
				this.SendPropertyChanged("ICDChapter");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Visits(Visit entity)
	{
		this.SendPropertyChanging();
		entity.ICD = this;
	}
	
	private void detach_Visits(Visit entity)
	{
		this.SendPropertyChanging();
		entity.ICD = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ICDChapter")]
public partial class ICDChapter : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Name;
	
	private string _Description;
	
	private EntitySet<ICD> _ICDs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public ICDChapter()
	{
		this._ICDs = new EntitySet<ICD>(new Action<ICD>(this.attach_ICDs), new Action<ICD>(this.detach_ICDs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ICDChapter_ICD", Storage="_ICDs", ThisKey="ID", OtherKey="ICDChapterID")]
	public EntitySet<ICD> ICDs
	{
		get
		{
			return this._ICDs;
		}
		set
		{
			this._ICDs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ICDs(ICD entity)
	{
		this.SendPropertyChanging();
		entity.ICDChapter = this;
	}
	
	private void detach_ICDs(ICD entity)
	{
		this.SendPropertyChanging();
		entity.ICDChapter = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabOrder")]
public partial class LabOrder : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private long _VisitID;
	
	private long _Date;
	
	private long _DoctorID;
	
	private EntitySet<LabOrderDetail> _LabOrderDetails;
	
	private EntityRef<Visit> _Visit;
	
	private EntityRef<Doctor> _Doctor;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnVisitIDChanging(long value);
    partial void OnVisitIDChanged();
    partial void OnDateChanging(long value);
    partial void OnDateChanged();
    partial void OnDoctorIDChanging(long value);
    partial void OnDoctorIDChanged();
    #endregion
	
	public LabOrder()
	{
		this._LabOrderDetails = new EntitySet<LabOrderDetail>(new Action<LabOrderDetail>(this.attach_LabOrderDetails), new Action<LabOrderDetail>(this.detach_LabOrderDetails));
		this._Visit = default(EntityRef<Visit>);
		this._Doctor = default(EntityRef<Doctor>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="BigInt NOT NULL")]
	public long VisitID
	{
		get
		{
			return this._VisitID;
		}
		set
		{
			if ((this._VisitID != value))
			{
				if (this._Visit.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnVisitIDChanging(value);
				this.SendPropertyChanging();
				this._VisitID = value;
				this.SendPropertyChanged("VisitID");
				this.OnVisitIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="BigInt NOT NULL")]
	public long Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="BigInt NOT NULL")]
	public long DoctorID
	{
		get
		{
			return this._DoctorID;
		}
		set
		{
			if ((this._DoctorID != value))
			{
				if (this._Doctor.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDoctorIDChanging(value);
				this.SendPropertyChanging();
				this._DoctorID = value;
				this.SendPropertyChanged("DoctorID");
				this.OnDoctorIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabOrder_LabOrderDetail", Storage="_LabOrderDetails", ThisKey="ID", OtherKey="LabOrderID")]
	public EntitySet<LabOrderDetail> LabOrderDetails
	{
		get
		{
			return this._LabOrderDetails;
		}
		set
		{
			this._LabOrderDetails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_LabOrder", Storage="_Visit", ThisKey="VisitID", OtherKey="ID", IsForeignKey=true)]
	public Visit Visit
	{
		get
		{
			return this._Visit.Entity;
		}
		set
		{
			Visit previousValue = this._Visit.Entity;
			if (((previousValue != value) 
						|| (this._Visit.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Visit.Entity = null;
					previousValue.LabOrders.Remove(this);
				}
				this._Visit.Entity = value;
				if ((value != null))
				{
					value.LabOrders.Add(this);
					this._VisitID = value.ID;
				}
				else
				{
					this._VisitID = default(long);
				}
				this.SendPropertyChanged("Visit");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_LabOrder", Storage="_Doctor", ThisKey="DoctorID", OtherKey="ID", IsForeignKey=true)]
	public Doctor Doctor
	{
		get
		{
			return this._Doctor.Entity;
		}
		set
		{
			Doctor previousValue = this._Doctor.Entity;
			if (((previousValue != value) 
						|| (this._Doctor.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Doctor.Entity = null;
					previousValue.LabOrders.Remove(this);
				}
				this._Doctor.Entity = value;
				if ((value != null))
				{
					value.LabOrders.Add(this);
					this._DoctorID = value.ID;
				}
				else
				{
					this._DoctorID = default(long);
				}
				this.SendPropertyChanged("Doctor");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_LabOrderDetails(LabOrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.LabOrder = this;
	}
	
	private void detach_LabOrderDetails(LabOrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.LabOrder = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabOrderDetail")]
public partial class LabOrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private long _MedicalServiceID;
	
	private string _Result;
	
	private long _LabOrderID;
	
	private EntityRef<LabOrder> _LabOrder;
	
	private EntityRef<MedicalService> _MedicalService;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMedicalServiceIDChanging(long value);
    partial void OnMedicalServiceIDChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnLabOrderIDChanging(long value);
    partial void OnLabOrderIDChanged();
    #endregion
	
	public LabOrderDetail()
	{
		this._LabOrder = default(EntityRef<LabOrder>);
		this._MedicalService = default(EntityRef<MedicalService>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalServiceID", DbType="BigInt NOT NULL")]
	public long MedicalServiceID
	{
		get
		{
			return this._MedicalServiceID;
		}
		set
		{
			if ((this._MedicalServiceID != value))
			{
				if (this._MedicalService.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMedicalServiceIDChanging(value);
				this.SendPropertyChanging();
				this._MedicalServiceID = value;
				this.SendPropertyChanged("MedicalServiceID");
				this.OnMedicalServiceIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Result
	{
		get
		{
			return this._Result;
		}
		set
		{
			if ((this._Result != value))
			{
				this.OnResultChanging(value);
				this.SendPropertyChanging();
				this._Result = value;
				this.SendPropertyChanged("Result");
				this.OnResultChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabOrderID", DbType="BigInt NOT NULL")]
	public long LabOrderID
	{
		get
		{
			return this._LabOrderID;
		}
		set
		{
			if ((this._LabOrderID != value))
			{
				if (this._LabOrder.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLabOrderIDChanging(value);
				this.SendPropertyChanging();
				this._LabOrderID = value;
				this.SendPropertyChanged("LabOrderID");
				this.OnLabOrderIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabOrder_LabOrderDetail", Storage="_LabOrder", ThisKey="LabOrderID", OtherKey="ID", IsForeignKey=true)]
	public LabOrder LabOrder
	{
		get
		{
			return this._LabOrder.Entity;
		}
		set
		{
			LabOrder previousValue = this._LabOrder.Entity;
			if (((previousValue != value) 
						|| (this._LabOrder.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._LabOrder.Entity = null;
					previousValue.LabOrderDetails.Remove(this);
				}
				this._LabOrder.Entity = value;
				if ((value != null))
				{
					value.LabOrderDetails.Add(this);
					this._LabOrderID = value.ID;
				}
				else
				{
					this._LabOrderID = default(long);
				}
				this.SendPropertyChanged("LabOrder");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalService_LabOrderDetail", Storage="_MedicalService", ThisKey="MedicalServiceID", OtherKey="ID", IsForeignKey=true)]
	public MedicalService MedicalService
	{
		get
		{
			return this._MedicalService.Entity;
		}
		set
		{
			MedicalService previousValue = this._MedicalService.Entity;
			if (((previousValue != value) 
						|| (this._MedicalService.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MedicalService.Entity = null;
					previousValue.LabOrderDetails.Remove(this);
				}
				this._MedicalService.Entity = value;
				if ((value != null))
				{
					value.LabOrderDetails.Add(this);
					this._MedicalServiceID = value.ID;
				}
				else
				{
					this._MedicalServiceID = default(long);
				}
				this.SendPropertyChanged("MedicalService");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalService")]
public partial class MedicalService : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Name;
	
	private double _Price;
	
	private long _MedicalServiceGroupID;
	
	private EntitySet<LabOrderDetail> _LabOrderDetails;
	
	private EntityRef<MedicalServiceGroup> _MedicalServiceGroup;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnMedicalServiceGroupIDChanging(long value);
    partial void OnMedicalServiceGroupIDChanged();
    #endregion
	
	public MedicalService()
	{
		this._LabOrderDetails = new EntitySet<LabOrderDetail>(new Action<LabOrderDetail>(this.attach_LabOrderDetails), new Action<LabOrderDetail>(this.detach_LabOrderDetails));
		this._MedicalServiceGroup = default(EntityRef<MedicalServiceGroup>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
	public double Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalServiceGroupID", DbType="BigInt NOT NULL")]
	public long MedicalServiceGroupID
	{
		get
		{
			return this._MedicalServiceGroupID;
		}
		set
		{
			if ((this._MedicalServiceGroupID != value))
			{
				if (this._MedicalServiceGroup.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMedicalServiceGroupIDChanging(value);
				this.SendPropertyChanging();
				this._MedicalServiceGroupID = value;
				this.SendPropertyChanged("MedicalServiceGroupID");
				this.OnMedicalServiceGroupIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalService_LabOrderDetail", Storage="_LabOrderDetails", ThisKey="ID", OtherKey="MedicalServiceID")]
	public EntitySet<LabOrderDetail> LabOrderDetails
	{
		get
		{
			return this._LabOrderDetails;
		}
		set
		{
			this._LabOrderDetails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalServiceGroup_MedicalService", Storage="_MedicalServiceGroup", ThisKey="MedicalServiceGroupID", OtherKey="ID", IsForeignKey=true)]
	public MedicalServiceGroup MedicalServiceGroup
	{
		get
		{
			return this._MedicalServiceGroup.Entity;
		}
		set
		{
			MedicalServiceGroup previousValue = this._MedicalServiceGroup.Entity;
			if (((previousValue != value) 
						|| (this._MedicalServiceGroup.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MedicalServiceGroup.Entity = null;
					previousValue.MedicalServices.Remove(this);
				}
				this._MedicalServiceGroup.Entity = value;
				if ((value != null))
				{
					value.MedicalServices.Add(this);
					this._MedicalServiceGroupID = value.ID;
				}
				else
				{
					this._MedicalServiceGroupID = default(long);
				}
				this.SendPropertyChanged("MedicalServiceGroup");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_LabOrderDetails(LabOrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.MedicalService = this;
	}
	
	private void detach_LabOrderDetails(LabOrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.MedicalService = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalServiceGroup")]
public partial class MedicalServiceGroup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Name;
	
	private string _Description;
	
	private EntitySet<MedicalService> _MedicalServices;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public MedicalServiceGroup()
	{
		this._MedicalServices = new EntitySet<MedicalService>(new Action<MedicalService>(this.attach_MedicalServices), new Action<MedicalService>(this.detach_MedicalServices));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalServiceGroup_MedicalService", Storage="_MedicalServices", ThisKey="ID", OtherKey="MedicalServiceGroupID")]
	public EntitySet<MedicalService> MedicalServices
	{
		get
		{
			return this._MedicalServices;
		}
		set
		{
			this._MedicalServices.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_MedicalServices(MedicalService entity)
	{
		this.SendPropertyChanging();
		entity.MedicalServiceGroup = this;
	}
	
	private void detach_MedicalServices(MedicalService entity)
	{
		this.SendPropertyChanging();
		entity.MedicalServiceGroup = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prescription")]
public partial class Prescription : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private long _Date;
	
	private long _DoctorID;
	
	private long _VisitID;
	
	private EntitySet<PrescriptionDetail> _PrescriptionDetails;
	
	private EntityRef<Visit> _Visit;
	
	private EntityRef<Doctor> _Doctor;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnDateChanging(long value);
    partial void OnDateChanged();
    partial void OnDoctorIDChanging(long value);
    partial void OnDoctorIDChanged();
    partial void OnVisitIDChanging(long value);
    partial void OnVisitIDChanged();
    #endregion
	
	public Prescription()
	{
		this._PrescriptionDetails = new EntitySet<PrescriptionDetail>(new Action<PrescriptionDetail>(this.attach_PrescriptionDetails), new Action<PrescriptionDetail>(this.detach_PrescriptionDetails));
		this._Visit = default(EntityRef<Visit>);
		this._Doctor = default(EntityRef<Doctor>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="BigInt NOT NULL")]
	public long Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="BigInt NOT NULL")]
	public long DoctorID
	{
		get
		{
			return this._DoctorID;
		}
		set
		{
			if ((this._DoctorID != value))
			{
				if (this._Doctor.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDoctorIDChanging(value);
				this.SendPropertyChanging();
				this._DoctorID = value;
				this.SendPropertyChanged("DoctorID");
				this.OnDoctorIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="BigInt NOT NULL")]
	public long VisitID
	{
		get
		{
			return this._VisitID;
		}
		set
		{
			if ((this._VisitID != value))
			{
				if (this._Visit.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnVisitIDChanging(value);
				this.SendPropertyChanging();
				this._VisitID = value;
				this.SendPropertyChanged("VisitID");
				this.OnVisitIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_PrescriptionDetail", Storage="_PrescriptionDetails", ThisKey="ID", OtherKey="PrescriptionID")]
	public EntitySet<PrescriptionDetail> PrescriptionDetails
	{
		get
		{
			return this._PrescriptionDetails;
		}
		set
		{
			this._PrescriptionDetails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_Prescription", Storage="_Visit", ThisKey="VisitID", OtherKey="ID", IsForeignKey=true)]
	public Visit Visit
	{
		get
		{
			return this._Visit.Entity;
		}
		set
		{
			Visit previousValue = this._Visit.Entity;
			if (((previousValue != value) 
						|| (this._Visit.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Visit.Entity = null;
					previousValue.Prescriptions.Remove(this);
				}
				this._Visit.Entity = value;
				if ((value != null))
				{
					value.Prescriptions.Add(this);
					this._VisitID = value.ID;
				}
				else
				{
					this._VisitID = default(long);
				}
				this.SendPropertyChanged("Visit");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Prescription", Storage="_Doctor", ThisKey="DoctorID", OtherKey="ID", IsForeignKey=true)]
	public Doctor Doctor
	{
		get
		{
			return this._Doctor.Entity;
		}
		set
		{
			Doctor previousValue = this._Doctor.Entity;
			if (((previousValue != value) 
						|| (this._Doctor.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Doctor.Entity = null;
					previousValue.Prescriptions.Remove(this);
				}
				this._Doctor.Entity = value;
				if ((value != null))
				{
					value.Prescriptions.Add(this);
					this._DoctorID = value.ID;
				}
				else
				{
					this._DoctorID = default(long);
				}
				this.SendPropertyChanged("Doctor");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PrescriptionDetails(PrescriptionDetail entity)
	{
		this.SendPropertyChanging();
		entity.Prescription = this;
	}
	
	private void detach_PrescriptionDetails(PrescriptionDetail entity)
	{
		this.SendPropertyChanging();
		entity.Prescription = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrescriptionDetail")]
public partial class PrescriptionDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private long _DrugID;
	
	private long _PrescriptionID;
	
	private int _Quantity;
	
	private int _Dose;
	
	private string _SpecialInstruction;
	
	private EntityRef<Drug> _Drug;
	
	private EntityRef<Prescription> _Prescription;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnDrugIDChanging(long value);
    partial void OnDrugIDChanged();
    partial void OnPrescriptionIDChanging(long value);
    partial void OnPrescriptionIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnDoseChanging(int value);
    partial void OnDoseChanged();
    partial void OnSpecialInstructionChanging(string value);
    partial void OnSpecialInstructionChanged();
    #endregion
	
	public PrescriptionDetail()
	{
		this._Drug = default(EntityRef<Drug>);
		this._Prescription = default(EntityRef<Prescription>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugID", DbType="BigInt NOT NULL")]
	public long DrugID
	{
		get
		{
			return this._DrugID;
		}
		set
		{
			if ((this._DrugID != value))
			{
				if (this._Drug.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDrugIDChanging(value);
				this.SendPropertyChanging();
				this._DrugID = value;
				this.SendPropertyChanged("DrugID");
				this.OnDrugIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionID", DbType="BigInt NOT NULL")]
	public long PrescriptionID
	{
		get
		{
			return this._PrescriptionID;
		}
		set
		{
			if ((this._PrescriptionID != value))
			{
				if (this._Prescription.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPrescriptionIDChanging(value);
				this.SendPropertyChanging();
				this._PrescriptionID = value;
				this.SendPropertyChanged("PrescriptionID");
				this.OnPrescriptionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
	public int Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dose", DbType="Int NOT NULL")]
	public int Dose
	{
		get
		{
			return this._Dose;
		}
		set
		{
			if ((this._Dose != value))
			{
				this.OnDoseChanging(value);
				this.SendPropertyChanging();
				this._Dose = value;
				this.SendPropertyChanged("Dose");
				this.OnDoseChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialInstruction", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string SpecialInstruction
	{
		get
		{
			return this._SpecialInstruction;
		}
		set
		{
			if ((this._SpecialInstruction != value))
			{
				this.OnSpecialInstructionChanging(value);
				this.SendPropertyChanging();
				this._SpecialInstruction = value;
				this.SendPropertyChanged("SpecialInstruction");
				this.OnSpecialInstructionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drug_PrescriptionDetail", Storage="_Drug", ThisKey="DrugID", OtherKey="ID", IsForeignKey=true)]
	public Drug Drug
	{
		get
		{
			return this._Drug.Entity;
		}
		set
		{
			Drug previousValue = this._Drug.Entity;
			if (((previousValue != value) 
						|| (this._Drug.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Drug.Entity = null;
					previousValue.PrescriptionDetails.Remove(this);
				}
				this._Drug.Entity = value;
				if ((value != null))
				{
					value.PrescriptionDetails.Add(this);
					this._DrugID = value.ID;
				}
				else
				{
					this._DrugID = default(long);
				}
				this.SendPropertyChanged("Drug");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_PrescriptionDetail", Storage="_Prescription", ThisKey="PrescriptionID", OtherKey="ID", IsForeignKey=true)]
	public Prescription Prescription
	{
		get
		{
			return this._Prescription.Entity;
		}
		set
		{
			Prescription previousValue = this._Prescription.Entity;
			if (((previousValue != value) 
						|| (this._Prescription.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Prescription.Entity = null;
					previousValue.PrescriptionDetails.Remove(this);
				}
				this._Prescription.Entity = value;
				if ((value != null))
				{
					value.PrescriptionDetails.Add(this);
					this._PrescriptionID = value.ID;
				}
				else
				{
					this._PrescriptionID = default(long);
				}
				this.SendPropertyChanged("Prescription");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Name;
	
	private string _Gender;
	
	private long _DateOfBirth;
	
	private string _LicenseNumber;
	
	private string _Address;
	
	private string _Image;
	
	private EntitySet<Visit> _Visits;
	
	private EntitySet<LabOrder> _LabOrders;
	
	private EntitySet<Prescription> _Prescriptions;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateOfBirthChanging(long value);
    partial void OnDateOfBirthChanged();
    partial void OnLicenseNumberChanging(string value);
    partial void OnLicenseNumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
	
	public Doctor()
	{
		this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
		this._LabOrders = new EntitySet<LabOrder>(new Action<LabOrder>(this.attach_LabOrders), new Action<LabOrder>(this.detach_LabOrders));
		this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Gender
	{
		get
		{
			return this._Gender;
		}
		set
		{
			if ((this._Gender != value))
			{
				this.OnGenderChanging(value);
				this.SendPropertyChanging();
				this._Gender = value;
				this.SendPropertyChanged("Gender");
				this.OnGenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="BigInt NOT NULL")]
	public long DateOfBirth
	{
		get
		{
			return this._DateOfBirth;
		}
		set
		{
			if ((this._DateOfBirth != value))
			{
				this.OnDateOfBirthChanging(value);
				this.SendPropertyChanging();
				this._DateOfBirth = value;
				this.SendPropertyChanged("DateOfBirth");
				this.OnDateOfBirthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string LicenseNumber
	{
		get
		{
			return this._LicenseNumber;
		}
		set
		{
			if ((this._LicenseNumber != value))
			{
				this.OnLicenseNumberChanging(value);
				this.SendPropertyChanging();
				this._LicenseNumber = value;
				this.SendPropertyChanged("LicenseNumber");
				this.OnLicenseNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(MAX)")]
	public string Image
	{
		get
		{
			return this._Image;
		}
		set
		{
			if ((this._Image != value))
			{
				this.OnImageChanging(value);
				this.SendPropertyChanging();
				this._Image = value;
				this.SendPropertyChanged("Image");
				this.OnImageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Visit", Storage="_Visits", ThisKey="ID", OtherKey="DoctorID")]
	public EntitySet<Visit> Visits
	{
		get
		{
			return this._Visits;
		}
		set
		{
			this._Visits.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_LabOrder", Storage="_LabOrders", ThisKey="ID", OtherKey="DoctorID")]
	public EntitySet<LabOrder> LabOrders
	{
		get
		{
			return this._LabOrders;
		}
		set
		{
			this._LabOrders.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Prescription", Storage="_Prescriptions", ThisKey="ID", OtherKey="DoctorID")]
	public EntitySet<Prescription> Prescriptions
	{
		get
		{
			return this._Prescriptions;
		}
		set
		{
			this._Prescriptions.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Visits(Visit entity)
	{
		this.SendPropertyChanging();
		entity.Doctor = this;
	}
	
	private void detach_Visits(Visit entity)
	{
		this.SendPropertyChanging();
		entity.Doctor = null;
	}
	
	private void attach_LabOrders(LabOrder entity)
	{
		this.SendPropertyChanging();
		entity.Doctor = this;
	}
	
	private void detach_LabOrders(LabOrder entity)
	{
		this.SendPropertyChanging();
		entity.Doctor = null;
	}
	
	private void attach_Prescriptions(Prescription entity)
	{
		this.SendPropertyChanging();
		entity.Doctor = this;
	}
	
	private void detach_Prescriptions(Prescription entity)
	{
		this.SendPropertyChanging();
		entity.Doctor = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Name;
	
	private string _Gender;
	
	private long _DateOfBirth;
	
	private string _Address;
	
	private string _Image;
	
	private EntitySet<Visit> _Visits;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateOfBirthChanging(long value);
    partial void OnDateOfBirthChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
	
	public Patient()
	{
		this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Gender
	{
		get
		{
			return this._Gender;
		}
		set
		{
			if ((this._Gender != value))
			{
				this.OnGenderChanging(value);
				this.SendPropertyChanging();
				this._Gender = value;
				this.SendPropertyChanged("Gender");
				this.OnGenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="BigInt NOT NULL")]
	public long DateOfBirth
	{
		get
		{
			return this._DateOfBirth;
		}
		set
		{
			if ((this._DateOfBirth != value))
			{
				this.OnDateOfBirthChanging(value);
				this.SendPropertyChanging();
				this._DateOfBirth = value;
				this.SendPropertyChanged("DateOfBirth");
				this.OnDateOfBirthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(MAX)")]
	public string Image
	{
		get
		{
			return this._Image;
		}
		set
		{
			if ((this._Image != value))
			{
				this.OnImageChanging(value);
				this.SendPropertyChanging();
				this._Image = value;
				this.SendPropertyChanged("Image");
				this.OnImageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Visit", Storage="_Visits", ThisKey="ID", OtherKey="PatientID")]
	public EntitySet<Visit> Visits
	{
		get
		{
			return this._Visits;
		}
		set
		{
			this._Visits.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Visits(Visit entity)
	{
		this.SendPropertyChanging();
		entity.Patient = this;
	}
	
	private void detach_Visits(Visit entity)
	{
		this.SendPropertyChanging();
		entity.Patient = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hospital")]
public partial class Hospital : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Name;
	
	private string _LicenseNumber;
	
	private string _Address;
	
	private string _Image;
	
	private EntitySet<Visit> _Visits;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLicenseNumberChanging(string value);
    partial void OnLicenseNumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
	
	public Hospital()
	{
		this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string LicenseNumber
	{
		get
		{
			return this._LicenseNumber;
		}
		set
		{
			if ((this._LicenseNumber != value))
			{
				this.OnLicenseNumberChanging(value);
				this.SendPropertyChanging();
				this._LicenseNumber = value;
				this.SendPropertyChanged("LicenseNumber");
				this.OnLicenseNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(MAX)")]
	public string Image
	{
		get
		{
			return this._Image;
		}
		set
		{
			if ((this._Image != value))
			{
				this.OnImageChanging(value);
				this.SendPropertyChanging();
				this._Image = value;
				this.SendPropertyChanged("Image");
				this.OnImageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Visit", Storage="_Visits", ThisKey="ID", OtherKey="HospitalID")]
	public EntitySet<Visit> Visits
	{
		get
		{
			return this._Visits;
		}
		set
		{
			this._Visits.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Visits(Visit entity)
	{
		this.SendPropertyChanging();
		entity.Hospital = this;
	}
	
	private void detach_Visits(Visit entity)
	{
		this.SendPropertyChanging();
		entity.Hospital = null;
	}
}
#pragma warning restore 1591
